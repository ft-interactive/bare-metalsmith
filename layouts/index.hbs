{{> head}}
  <body onload="initFilters();">
    {{> tracking-snippet}}

    {{> header}}

    <main role="main">
      <article class="article">
        <div class="article-head o-grid-container">
          <div class="o-grid-row">
            <header data-o-grid-colspan="12 S12 Scenter M10 L8">
              {{> share}}

              {{> article-header}}
            </header>
          </div>


        <div class="article-body o-typography-body-wrapper">
          {{{contents}}}
          <div class="aggregate o-grid-row">
            <div data-o-grid-colspan="12"><h2>Change in total value since June 24</h2>
              <div class="o-grid-row">
                {{#each agg}}
                {{> agg-item}}
                {{/each}}
              </div>
              <div id="chart"></div>
            </div>
          </div>

          <div class="o-grid-row filters">
            <div data-o-grid-colspan="12 center" style="padding-left: 0">
              <h2 class="o-typography-subhead">Announcements by type</h3>
              <div class="filters--major">
                <button class="o-buttons o-buttons--big collection-filter" id="financial">Financial Gain ({{collections.[2].count}})</button>
                <button class="o-buttons o-buttons--big collection-filter" id="profit">Profit Warning ({{collections.[10].count}})</button>
                <button class="o-buttons o-buttons--big collection-filter" id="jobs">Jobs ({{collections.[6].count}})</button>
              </div>

              <div class="filters--minor">
                <div class="filters--minor__holder">
                  <button id="asset" class="collection-filter">Asset sales</button>
                  <button id="credit" class="collection-filter">Credit downgrade</button>
                  <button id="fundraising" class="collection-filter">Fundraising</button>
                  <button id="relocation" class="collection-filter">HQ relocation</button>
                  <button id="investment" class="collection-filter">Investment</button>
                  <button id="market" class="collection-filter">Market access warning</button>
                  <button id="mergers" class="collection-filter">Mergers &amp; acquisitions</button>
                  <button id="outlook" class="collection-filter">Outlook warning</button>
                </div>
                <button class="o-buttons o-buttons--standout o-buttons--big__reset" id="reset">Reset All Filters</button>
              </div>
            </div>
          </div>

          <div class="o-grid-row" id="feed">
            <ul class="list">
              <!-- Parse Bertha data as feed object, iterating over the array to form a list -->
              {{#each (sortBy feed 'timestamp')}}
              <li>
                {{#if story.url}}
                <a class ="card-link" href="{{story.url}}">
                {{/if}}
                  {{> feed-item}}
                {{#if story.url}}
                </a>
                {{/if}}
              </li>
              {{/each}}
            </ul>
          </div>
        </div>
      </article>
    </main>

    {{> footer}}
    <script src="scripts/list.min.js"></script>
    <script src="scripts/d3.min.js"></script>
    <script src="scripts/drawFrame.js"></script>
    <script src="scripts/line.js"></script>
    <script src="scripts/main.js"></script>
    <script>
      //datafile
      var dataURL = "gdpusd.csv"

      //titles, footnotes
      var title = "Chinese profits are down for the first time since 2008";
      var subtitle = "Changes in Chinese listed companies' net profit* (%)";//comment out subtitle assignment if not needed
      var source = "Dazhihui";

      //graph options
      var yMin=0.5;
      var yMax=1.4;
      var yAxisHighlight=-20;
      var lineSmoothing="linear";//choose 'linear' for an unsmoothed line 'monotone' for smooth
      var logScale=false;
      var logScaleStart=1000;
      var markers=false;//show circle markers
      var numTicksy = 8;//rough number of ticks for y axis
      var numTicksx = 10;//rough number of ticks for x axis
      var interval="years";//days, months or years
      var ticks//=[0.2,0.3];//option to force tick values for online

      //Use the frames array to set unique values for each media type of frame
      // Print column sizes-- 1col 53.71mm: 2col 112.25mm: 3col 170.8mm: 4col 229.34mm: 5col 287.88mm: 6col 346.43
      var frames=[
        {name:"web",width:600,height:275,units:'px',margins:[{top:0,right:20,bottom:5,left:00}],stylesheet:styleweb,legend:"hori",yLabel:"right"},
      ]

      //sets the padding inside the chart area
      var chartpadding=[
        {name:"web",margin:[{top:20, right:0,bottom:20,left:10}]},
      ]
      //Add blank frames
      drawFrames()
      //Load Data
      d3.csv(dataURL,function(error, data){
          //date formatter, matching the format of the incoming csv...
          //var parseDate = d3.time.format("%Y %b").parse;
          //var parseDate = d3.time.format("%Y").parse;//just full year
          var parseDate = d3.time.format("%Y-%m-%d").parse;
          /*
          some common formatting parsers....
          d3.time.format("%Y %b") 1986 Jan
          d3.time.format("%d-%b-%y")  28-Jan-86
          d3.time.format("%Y-%m-%d")  1986-01-28
          d3.time.format("%m/%d/%Y")  01/28/1986
          d3.time.format("%H:%M") 11:39
          d3.time.format("%H:%M %p")  11:39 AM
          d3.time.format("%B %d") January 28
          d3.time.format("%d %b") 28 Jan
           d3.time.format("%d/%m/%Y %H:%M")28/01/16
           */

          //parse the data
          data.forEach(function(d) {
              d.date=parseDate(d.date);
          });
      //YOU SHOULD'NT HAVE TO DO MUCH AFTER THIS
          //ticks=calculateTicks(data,interval)

          for (var i=0;i<frames.length;i++){
              var stylename=frames[i].stylesheet;
              var media = frames[i].name;
              var legend=frames[i].legend;
              var subYoffset=stylename.subOffset
              var yLabel=frames[i].yLabel
              lineChart(data,stylename,media,yMin,yMax,yAxisHighlight,chartpadding,legend, lineSmoothing,logScale,logScaleStart,markers, numTicksy,yLabel,ticks);
          }
      })//end data load

      function drawFrames(){
          for (var i=0;i<frames.length;i++){
              var stylename=frames[i].stylesheet;
              var media = frames[i].name;
              if(frames[i].units=="mm") {
                  framewidth = mmToPx(frames[i].width);
                  frameheight = mmToPx(frames[i].height);
              }
              else{
                  framewidth = frames[i].width;
                  frameheight = frames[i].height;
              }
              var framemargin = frames[i].margins[0];
              var titleYoffset=stylename.titleOffset;
              var subYoffset=stylename.subOffset
              var frame = new drawFrame(stylename.classes,media,titleYoffset,subYoffset)
                  .width(framewidth)
                  .height(frameheight)
                  .margin(framemargin)
                  .title(title)
                  .source(source)
              //optional elements
              if (subtitle){
                  frame.subtitle(subtitle)
              }
              d3.select("#chart").call(frame)
          }
      }

      function calculateTicks(data,int) {
          console.log("intercal ", int)
          var dateDomain = d3.extent(data, function(d) {return d.date;});
          console.log("domain ",dateDomain)
          switch (int) {
              case 'years':
              var major=years(dateDomain)
              //var minor=months(dateDomain)
              case 'months':
              var major=months(dateDomain)
              //var minor=days(dateDomain)
              case 'days':
              var major=days(dateDomain)
              //var minor=hours(dateDomain)
          }
          console.log("major ",major)
          return major

          function years(dateDomain) {
              var intervals= d3.time.year.range(new Date(dateDomain[0]), new Date(dateDomain[1]));
              intervals.unshift(dateDomain[0])
              console.log("years ", intervals)
              return intervals
          }

          function months(dateDomain) {
              var intervals= d3.time.months(new Date(dateDomain[0]), new Date(dateDomain[1]));
              intervals.unshift(dateDomain[0])
              console.log("months ", intervals)
              return intervals
          }

          function days(dateDomain) {
              var intervals = d3.time.days(new Date(dateDomain[0]), new Date(dateDomain[1]));
              intervals.unshift(dateDomain[0])
              console.log("days ", intervals)
              return intervals
          }

          function hours(dateDomain) {
              var intervals = d3.time.hours(new Date(dateDomain[0]), new Date(dateDomain[1]));
              intervals.unshift(dateDomain[0])
              console.log("minutes ", intervals)
              return intervals
          }
      }

      function mmToPx(mm){
          var px = mm*2.83464480558843;
          return px;
      }
    </script>
  </body>
</html>
