<style>
  div#chart {
    margin-left: -20px;
    padding-top: 10px;
  }

  .title {
    margin-left: 20px;
    font-size: 21px;
    font-weight: 400;
    color: #3b3d3b;
    text-align: left;
  }

  .subtitle {
    margin-left: 20px;
    font-size: 14px;
    font-weight: 400;
    color: #6b6e68;
    text-align: left;
  }

  .axis {
    fill: none;
    stroke-width: 1px;
    stroke: #c3bcb0;
  }

  .x.axis {
    stroke: #9ba497;
    stroke-dasharray: 1, 2;
  }

  .y.axis .domain {
    stroke: none;
  }

  .tick text {
    fill: #6b6e68;
    stroke: none;
    font-size: 14px;
    font-weight: 400;
  }

  .x .tick {
    stroke-dasharray: 0;
  }

  .y .tick {
    stroke: #9ba497;
    stroke-dasharray: 1, 2;
  }

  .y .tick text {
    font-feature-settings: 'tnum' 1;
    text-anchor: end;
  }

  .line {
    fill: none;
    stroke: #a5526a;
    stroke-width: 2.5px;
    stroke-linecap: round;
  }

</style>

<div id="chart"></div>

<script src="scripts/d3.min.js"></script>
<script>
var margin = {top: 20, right: 50, bottom: 30, left: 50};
var width = parseInt(d3.select('#chart').style('width')) - margin.left - margin.right;
var height = 275 - margin.top - margin.bottom;
var parseDate = d3.time.format('%Y-%m-%d').parse;
var timeFormat = d3.time.format.multi([
  ['.%L', function (d) { return d.getMilliseconds(); }],
  [':%S', function (d) { return d.getSeconds(); }],
  ['%I:%M', function (d) { return d.getMinutes(); }],
  ['%I %p', function (d) { return d.getHours(); }],
  // ['%a %e', function (d) { return d.getDay() && d.getDate() !== 1; }],
  ['%b %e', function (d) { return d.getDate() !== 1; }],
  ['%b', function (d) { return d.getMonth(); }],
  ['%Y', function () { return true; }]
]);

var x = d3.time.scale()
    .range([0, width]);

var y = d3.scale.linear()
    .range([height, 0]);

var xAxis = d3.svg.axis()
    .scale(x)
    .orient('bottom')
    .ticks(4)
    .tickFormat(timeFormat)
    .outerTickSize(0);

var yAxis = d3.svg.axis()
    .scale(y)
    .orient('right')
    .tickSize(-width);

d3.select('#chart').append('div')
    .attr('class', 'title')
    .text('Sterling vs dollar since EU referendum');

d3.select('#chart').append('div')
    .attr('class', 'subtitle')
    .text('$ per Â£');

var svg = d3.select('#chart').append('svg')
    .attr('width', width + margin.left + margin.right)
    .attr('height', height + margin.top + margin.bottom)
  .append('g')
    .attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');

var line = d3.svg.line()
    .x(function (d) {
      return x(d.date);
    })
    .y(function (d) {
      return y(d.value);
    });

d3.csv('gdpusd.csv', function (error, data) {
  if (error) throw error;

  data.forEach(function (d) {
    d.date = parseDate(d.date);
  });

  data.sort(function (a, b) {
    return a.date - b.date;
  });

  x.domain([data[0].date, data[data.length - 1].date]);

  y.domain(d3.extent(data, function (d) {
    return d.value;
  }));

  svg.append('g')
      .attr('class', 'x axis')
      .attr('transform', 'translate(0,' + height + ')')
      .call(xAxis);

  svg.append('g')
      .attr('class', 'y axis')
      .attr('transform', 'translate(' + width + ',0)')
      .call(yAxis);

  svg.append('path')
      .datum(data)
      .attr('class', 'line')
      .attr('d', line);

  function resize() {
    // Find the new window dimensions
    var width = parseInt(d3.select('#chart').style('width'), 10) - margin.left - margin.right;

    // Update the range of the scale with new width/height
    x.range([0, width]);
    y.range([height, 0]);

    // Update the axis with the new scale
    svg.select('.x.axis')
        .attr('transform', 'translate(0,' + height + ')')
        .call(xAxis);

    svg.select('.y.axis')
        .attr('transform', 'translate(' + width + ',0)')
        .call(yAxis);

    xAxis.ticks(4);

    yAxis.tickSize(-width);

    // Force D3 to recalculate and update the line
    d3.selectAll('.line')
        .attr('d', line);
  }

  d3.select(window).on('resize', resize);
});
</script>
